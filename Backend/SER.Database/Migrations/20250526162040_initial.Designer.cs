// <auto-generated />
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using SER.Database;

#nullable disable

namespace SER.Database.Migrations
{
    [DbContext(typeof(SERDbContext))]
    [Migration("20250526162040_initial")]
    partial class initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("AdditionalQualificationEntityStudentEntity", b =>
                {
                    b.Property<byte[]>("AdditionalQualificationsId")
                        .HasColumnType("bytea");

                    b.Property<byte[]>("StudentEntityId")
                        .HasColumnType("bytea");

                    b.HasKey("AdditionalQualificationsId", "StudentEntityId");

                    b.HasIndex("StudentEntityId");

                    b.ToTable("AdditionalQualificationEntityStudentEntity");
                });

            modelBuilder.Entity("SER.Database.Models.AdditionalQualifications.AdditionalQualificationEntity", b =>
                {
                    b.Property<byte[]>("Id")
                        .HasColumnType("bytea")
                        .HasColumnName("id");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("code");

                    b.Property<DateTime>("CreatedDateTimeUtc")
                        .HasColumnType("timestamp")
                        .HasColumnName("created_datetime_utc");

                    b.Property<DateTime?>("ModifiedDateTimeUtc")
                        .HasColumnType("timestamp")
                        .HasColumnName("modified_datetime_utc");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("name");

                    b.Property<string>("StudyTime")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("study_time");

                    b.HasKey("Id");

                    b.ToTable("additional_qualifications", (string)null);
                });

            modelBuilder.Entity("SER.Database.Models.Clusters.ClusterEntity", b =>
                {
                    b.Property<byte[]>("Id")
                        .HasColumnType("bytea")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedDateTimeUtc")
                        .HasColumnType("timestamp")
                        .HasColumnName("created_datetime_utc");

                    b.Property<DateTime?>("ModifiedDateTimeUtc")
                        .HasColumnType("timestamp")
                        .HasColumnName("modified_datetime_utc");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.ToTable("clusters", (string)null);
                });

            modelBuilder.Entity("SER.Database.Models.EducationLevels.EducationLevelEntity", b =>
                {
                    b.Property<byte[]>("Id")
                        .HasColumnType("bytea")
                        .HasColumnName("id");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("code");

                    b.Property<DateTime>("CreatedDateTimeUtc")
                        .HasColumnType("timestamp")
                        .HasColumnName("created_datetime_utc");

                    b.Property<DateTime?>("ModifiedDateTimeUtc")
                        .HasColumnType("timestamp")
                        .HasColumnName("modified_datetime_utc");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("name");

                    b.Property<string>("StudyTime")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("study_time");

                    b.Property<int>("Type")
                        .HasColumnType("integer")
                        .HasColumnName("type");

                    b.HasKey("Id");

                    b.ToTable("education_levels", (string)null);
                });

            modelBuilder.Entity("SER.Database.Models.Employees.EmployeeEntity", b =>
                {
                    b.Property<byte[]>("Id")
                        .HasColumnType("bytea")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedDateTimeUtc")
                        .HasColumnType("timestamp")
                        .HasColumnName("created_datetime_utc");

                    b.Property<string>("LastName")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("last_name");

                    b.Property<DateTime?>("ModifiedDateTimeUtc")
                        .HasColumnType("timestamp")
                        .HasColumnName("modified_datetime_utc");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("name");

                    b.Property<string>("SecondName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("second_name");

                    b.HasKey("Id");

                    b.ToTable("employees", (string)null);
                });

            modelBuilder.Entity("SER.Database.Models.Enterprises.EnterpriseEntity", b =>
                {
                    b.Property<byte[]>("Id")
                        .HasColumnType("bytea")
                        .HasColumnName("id");

                    b.Property<string>("ActualAddress")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("actual_address");

                    b.Property<string>("Address")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("address");

                    b.Property<DateTime>("CreatedDateTimeUtc")
                        .HasColumnType("timestamp")
                        .HasColumnName("created_datetime_utc");

                    b.Property<string>("INN")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("inn");

                    b.Property<bool>("IsOPK")
                        .HasColumnType("boolean")
                        .HasColumnName("is_opk");

                    b.Property<string>("KPP")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("kpp");

                    b.Property<string>("LegalAddress")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("legal_address");

                    b.Property<string>("Mail")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("mail");

                    b.Property<DateTime?>("ModifiedDateTimeUtc")
                        .HasColumnType("timestamp")
                        .HasColumnName("modified_datetime_utc");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("name");

                    b.Property<string>("ORGN")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("orgn");

                    b.Property<string>("Phone")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("phone");

                    b.HasKey("Id");

                    b.ToTable("enterprises", (string)null);
                });

            modelBuilder.Entity("SER.Database.Models.Groups.GroupEntity", b =>
                {
                    b.Property<byte[]>("Id")
                        .HasColumnType("bytea")
                        .HasColumnName("id");

                    b.Property<byte[]>("ClusterId")
                        .HasColumnType("bytea")
                        .HasColumnName("cluster_id");

                    b.Property<DateTime>("CreatedDateTimeUtc")
                        .HasColumnType("timestamp")
                        .HasColumnName("created_datetime_utc");

                    b.Property<byte[]>("CuratorId")
                        .HasColumnType("bytea")
                        .HasColumnName("curator_id");

                    b.Property<byte[]>("EducationLevelId")
                        .IsRequired()
                        .HasColumnType("bytea")
                        .HasColumnName("education_level_id");

                    b.Property<int>("EnrollmentYear")
                        .HasColumnType("integer")
                        .HasColumnName("enrollment_year");

                    b.Property<bool>("HasCluster")
                        .HasColumnType("boolean")
                        .HasColumnName("has_cluster");

                    b.Property<DateTime?>("ModifiedDateTimeUtc")
                        .HasColumnType("timestamp")
                        .HasColumnName("modified_datetime_utc");

                    b.Property<string>("Number")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("number");

                    b.Property<int>("StructuralUnit")
                        .HasColumnType("integer")
                        .HasColumnName("sctructural_unit");

                    b.HasKey("Id");

                    b.HasIndex("ClusterId");

                    b.HasIndex("CuratorId");

                    b.HasIndex("EducationLevelId");

                    b.ToTable("groups", (string)null);
                });

            modelBuilder.Entity("SER.Database.Models.Students.StudentEntity", b =>
                {
                    b.Property<byte[]>("Id")
                        .HasColumnType("bytea")
                        .HasColumnName("id");

                    b.Property<string>("Address")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("address");

                    b.Property<DateTime?>("ArmyCallDate")
                        .HasColumnType("date")
                        .HasColumnName("army_call_date");

                    b.PrimitiveCollection<List<string>>("ArmySubpoenaFiles")
                        .IsRequired()
                        .HasColumnType("varchar[]")
                        .HasColumnName("army_subpoena_files");

                    b.Property<DateTime?>("BirthDate")
                        .HasColumnType("date")
                        .HasColumnName("birth_date");

                    b.Property<DateTime>("CreatedDateTimeUtc")
                        .HasColumnType("timestamp")
                        .HasColumnName("created_datetime_utc");

                    b.Property<int>("Gender")
                        .HasColumnType("integer")
                        .HasColumnName("gender");

                    b.Property<byte[]>("GroupId")
                        .IsRequired()
                        .HasColumnType("bytea")
                        .HasColumnName("group_id");

                    b.Property<string>("Inn")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("inn");

                    b.Property<bool>("IsForeignCitizen")
                        .HasColumnType("boolean")
                        .HasColumnName("is_foreign_citizen");

                    b.Property<bool>("IsOnPaidStudy")
                        .HasColumnType("boolean")
                        .HasColumnName("is_on_paid_study");

                    b.Property<bool>("IsTargetAgreement")
                        .HasColumnType("boolean")
                        .HasColumnName("is_target_agreement");

                    b.Property<string>("LastName")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("last_name");

                    b.Property<string>("Mail")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("mail");

                    b.Property<DateTime?>("ModifiedDateTimeUtc")
                        .HasColumnType("timestamp")
                        .HasColumnName("modified_datetime_utc");

                    b.Property<bool>("MustServeInArmy")
                        .HasColumnType("boolean")
                        .HasColumnName("must_serve_in_army");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("name");

                    b.PrimitiveCollection<List<string>>("OtherFiles")
                        .IsRequired()
                        .HasColumnType("varchar[]")
                        .HasColumnName("other_files");

                    b.PrimitiveCollection<List<string>>("PassportFiles")
                        .IsRequired()
                        .HasColumnType("varchar[]")
                        .HasColumnName("passport_files");

                    b.Property<string>("PassportIssuedBy")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("passport_issued_by");

                    b.Property<DateTime?>("PassportIssuedDate")
                        .HasColumnType("date")
                        .HasColumnName("passport_issued_date");

                    b.Property<string>("PassportNumber")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("passport_number");

                    b.Property<string>("PassportSeries")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("passport_series");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("phone_number");

                    b.Property<string>("RepresentativeAlias")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("representative_alias");

                    b.Property<string>("RepresentativePhoneNumber")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("representative_phone_number");

                    b.Property<string>("SecondName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("second_name");

                    b.Property<string>("Snils")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("snils");

                    b.Property<int[]>("SocialStatuses")
                        .IsRequired()
                        .HasColumnType("int[]")
                        .HasColumnName("social_statuses");

                    b.Property<int>("Status")
                        .HasColumnType("integer")
                        .HasColumnName("status");

                    b.Property<DateTime?>("TargetAgreementDate")
                        .HasColumnType("date")
                        .HasColumnName("target_agreement_date");

                    b.Property<byte[]>("TargetAgreementEnterpriseId")
                        .HasColumnType("bytea")
                        .HasColumnName("target_agreement_enterprise_id");

                    b.PrimitiveCollection<List<string>>("TargetAgreementFiles")
                        .IsRequired()
                        .HasColumnType("varchar[]")
                        .HasColumnName("target_agreement_files");

                    b.Property<string>("TargetAgreementNumer")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("target_agreement_number");

                    b.HasKey("Id");

                    b.HasIndex("GroupId");

                    b.HasIndex("TargetAgreementEnterpriseId");

                    b.ToTable("students", (string)null);
                });

            modelBuilder.Entity("SER.Database.Models.WorkPlaces.WorkPlaceEntity", b =>
                {
                    b.Property<byte[]>("Id")
                        .HasColumnType("bytea")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedDateTimeUtc")
                        .HasColumnType("timestamp")
                        .HasColumnName("created_datetime_utc");

                    b.Property<byte[]>("EnterpriseId")
                        .IsRequired()
                        .HasColumnType("bytea")
                        .HasColumnName("enterprise_id");

                    b.Property<DateTime?>("FinishDate")
                        .HasColumnType("date")
                        .HasColumnName("finish_date");

                    b.Property<bool>("IsCurrent")
                        .HasColumnType("boolean")
                        .HasColumnName("is_current");

                    b.Property<DateTime?>("ModifiedDateTimeUtc")
                        .HasColumnType("timestamp")
                        .HasColumnName("modified_datetime_utc");

                    b.Property<string>("Post")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("post");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("date")
                        .HasColumnName("start_date");

                    b.Property<byte[]>("StudentId")
                        .IsRequired()
                        .HasColumnType("bytea")
                        .HasColumnName("student_id");

                    b.PrimitiveCollection<List<string>>("WorkBookExtractFiles")
                        .IsRequired()
                        .HasColumnType("varchar[]")
                        .HasColumnName("work_book_extract_files");

                    b.HasKey("Id");

                    b.HasIndex("EnterpriseId");

                    b.HasIndex("StudentId");

                    b.ToTable("work_places", (string)null);
                });

            modelBuilder.Entity("AdditionalQualificationEntityStudentEntity", b =>
                {
                    b.HasOne("SER.Database.Models.AdditionalQualifications.AdditionalQualificationEntity", null)
                        .WithMany()
                        .HasForeignKey("AdditionalQualificationsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SER.Database.Models.Students.StudentEntity", null)
                        .WithMany()
                        .HasForeignKey("StudentEntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SER.Database.Models.Groups.GroupEntity", b =>
                {
                    b.HasOne("SER.Database.Models.Clusters.ClusterEntity", "Cluster")
                        .WithMany()
                        .HasForeignKey("ClusterId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("fk_group_cluster");

                    b.HasOne("SER.Database.Models.Employees.EmployeeEntity", "Curator")
                        .WithMany()
                        .HasForeignKey("CuratorId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("fk_group_curator");

                    b.HasOne("SER.Database.Models.EducationLevels.EducationLevelEntity", "EducationLevel")
                        .WithMany()
                        .HasForeignKey("EducationLevelId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_group_education_level");

                    b.Navigation("Cluster");

                    b.Navigation("Curator");

                    b.Navigation("EducationLevel");
                });

            modelBuilder.Entity("SER.Database.Models.Students.StudentEntity", b =>
                {
                    b.HasOne("SER.Database.Models.Groups.GroupEntity", "Group")
                        .WithMany()
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_student_group");

                    b.HasOne("SER.Database.Models.Enterprises.EnterpriseEntity", "TargetAgreementEnterprise")
                        .WithMany()
                        .HasForeignKey("TargetAgreementEnterpriseId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("fk_student_target_agreement_enterprise");

                    b.Navigation("Group");

                    b.Navigation("TargetAgreementEnterprise");
                });

            modelBuilder.Entity("SER.Database.Models.WorkPlaces.WorkPlaceEntity", b =>
                {
                    b.HasOne("SER.Database.Models.Enterprises.EnterpriseEntity", "Enterprise")
                        .WithMany()
                        .HasForeignKey("EnterpriseId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_workplace_enterprise");

                    b.HasOne("SER.Database.Models.Students.StudentEntity", null)
                        .WithMany("WorkPlaces")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_workplace_student");

                    b.Navigation("Enterprise");
                });

            modelBuilder.Entity("SER.Database.Models.Students.StudentEntity", b =>
                {
                    b.Navigation("WorkPlaces");
                });
#pragma warning restore 612, 618
        }
    }
}
